plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.asciidoctor.jvm.convert' version '4.0.0-alpha.1'
	id 'com.github.node-gradle.node' version '3.5.1'
}

repositories {
    mavenCentral()
}

// Spring Boot configuration
springBoot {
	// Define the main class for the application.
   	mainClass = 'com.example.application.UserInterfaceApplication'

}

subprojects {
	// Do not use
}

project(":user-interface") {
    apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.asciidoctor.jvm.convert'
	apply plugin: 'com.github.node-gradle.node'
    
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    configurations {
	    compileOnly {
		    extendsFrom annotationProcessor
	    }
    }

    repositories {
	    mavenCentral()
    }

    ext {
	    set('snippetsDir', file("build/generated-snippets"))
    }

    dependencies {
		implementation project(':domain-model')
		implementation project(':domain-service')
		implementation project(':application-service')
		// implementation project(':infrastructure')

    	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-batch:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-cache:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-data-ldap:3.0.5'
        implementation 'org.springframework.boot:spring-boot-starter-data-rest:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-hateoas:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-integration:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-mail:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-security:3.0.5'
	    
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-web:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-web-services:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.0.5'
		
        implementation 'org.springframework.integration:spring-integration-http:6.0.3'
	    implementation 'org.springframework.integration:spring-integration-jpa:6.0.3'
	    implementation 'org.springframework.integration:spring-integration-mail:6.0.3'
	    implementation 'org.springframework.integration:spring-integration-security:6.0.3'
	    implementation 'org.springframework.integration:spring-integration-webflux:6.0.3'
	    implementation 'org.springframework.integration:spring-integration-ws:6.0.3'
	    
        implementation 'org.springframework.session:spring-session-core:3.0.1'
	    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
	    
		// recordクラスを使用するためlombokの利用は廃止予定です。
        // compileOnly 'org.projectlombok:lombok'
	    
        developmentOnly 'org.springframework.boot:spring-boot-devtools:3.0.5'
	    
        // DBのランタイムを追加   
        // runtimeOnly 'com.h2database:h2'
	    runtimeOnly 'org.postgresql:postgresql:42.6.0'

   		// jakartaを追加
	    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
		annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

     	// MapStructを追加
        implementation 'org.mapstruct:mapstruct:1.5.3.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.0.5'

		// recordクラスを使用するためlombokの利用は廃止予定です。
	    // annotationProcessor 'org.projectlombok:lombok'
	
        testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.5'
	    testImplementation 'io.projectreactor:reactor-test:3.5.5'
	    testImplementation 'org.springframework.batch:spring-batch-test:5.0.1'
	    testImplementation 'org.springframework.integration:spring-integration-test:6.0.3'
	    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.0'
	    testImplementation 'org.springframework.security:spring-security-test:6.0.3'
    }

    tasks.named('test') {
	    outputs.dir snippetsDir
	    useJUnitPlatform()
    }

    tasks.named('asciidoctor') {
	    inputs.dir snippetsDir
	    dependsOn test
    }
	
	bootRun {
    	// for static resource hot reloading
   		// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#running-your-application-reloading-resources
    	// スタティックファイルの変更を直接反映させる
    	//  Thymeleaf .html や .css/.js などの修正が即反映
    	sourceResources sourceSets.main
	}

    /*
	jar {
	    from('src/main/resources') {
        	include 'application.properties'
    	}
	}
	 */
}

// 依存関係を再構築する場合は、各プロジェクト間の連携は一旦コメントアウトしたほうが良さそう

project(':infrastructure') {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '17'])
    }

    sourceCompatibility = '17'

	bootJar {
        enabled = false
	}

    jar {
        enabled = true
    }

    repositories {
	    mavenCentral()
    }
	
    dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}

    dependencies {
		implementation project(':domain-model')
		implementation project(':domain-service')

		// infrastructure用
		implementation 'org.springframework.boot:spring-boot-starter-data-jdbc:3.0.5'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.5'
	    implementation 'org.springframework.boot:spring-boot-starter-mail:3.0.5'
	    implementation 'org.springframework.integration:spring-integration-jpa:6.0.3'
	    implementation 'org.springframework.integration:spring-integration-mail:6.0.3'

		// Spring Security
		implementation 'org.springframework.boot:spring-boot-starter-security:3.0.5'
		implementation 'org.springframework.boot:spring-boot-starter-web:3.0.5'

		// Spring DIを明示的に宣言
        implementation 'org.springframework:spring-context:5.3.12'

		// jakartaを追加
	    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
		annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

		// MapStructを追加
		implementation 'org.mapstruct:mapstruct:1.5.3.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
			    
		// DBのランタイムを追加
		// runtimeOnly 'com.h2database:h2:2.1.214'
	    runtimeOnly 'org.postgresql:postgresql:42.6.0'

		// Spring Security
    	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.5'
	    // testImplementation 'org.springframework.security:spring-security-test:6.0.3'
    }

	sourceSets {
    	main {
        	resources {
            	srcDirs = ["../user-interface/src/main/resources"]
            	include "application.properties"
            	include "jpa.properties"
        	}
    	}
	}
}

project(':application-service') {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '17'])
    }

    sourceCompatibility = '17'

	bootJar {
        enabled = false
	}

    jar {
        enabled = true
    }

    repositories {
	    mavenCentral()
    }
	
    dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}

    dependencies {
		implementation project(':domain-model')
		implementation project(':domain-service')

		// Spring Security
		implementation 'org.springframework.boot:spring-boot-starter-security:3.0.5'
		implementation 'org.springframework.boot:spring-boot-starter-web:3.0.5'
		
		// Spring DIを明示的に宣言
        implementation 'org.springframework:spring-context:5.3.12'

		// jakartaを追加
	    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	    implementation 'jakarta.transaction:jakarta.transaction-api:2.0.1'
		annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
		annotationProcessor 'jakarta.transaction:jakarta.transaction-api:2.0.1'

		// MapStructを追加
		implementation 'org.mapstruct:mapstruct:1.5.3.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

		// Spring Security
    	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.5'
    	// testImplementation 'org.springframework.security:spring-security-test:6.0.3'
    }
}

project(':domain-service') {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '17'])
    }

    sourceCompatibility = '17'

	bootJar {
        enabled = false
	}

    jar {
        enabled = true
    }

    repositories {
	    mavenCentral()
    }
	
    dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}

    dependencies {
		implementation project(':domain-model')
		
		// Spring Security
		implementation 'org.springframework.boot:spring-boot-starter-security:3.0.5'
		implementation 'org.springframework.boot:spring-boot-starter-web:3.0.5'

		// Spring DIを明示的に宣言
        implementation 'org.springframework:spring-context:5.3.12'

		// jakartaを追加
	    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
		annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

		// MapStructを追加
		implementation 'org.mapstruct:mapstruct:1.5.3.Final'		
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

		// Spring Security
    	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.5'
    	// testImplementation 'org.springframework.security:spring-security-test:6.0.3'
    }

	sourceSets {
    	main {
        	resources {
            	srcDirs = ["../user-interface/src/main/resources"]
            	include "application.properties"
            	include "jpa.properties"
        	}
    	}
	}
}

project(':domain-model') {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '17'])
    }

    sourceCompatibility = '17'

	bootJar {
        enabled = false
	}

    jar {
        enabled = true
    }
	
    dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}

    repositories {
	    mavenCentral()
    }

    dependencies {
		// Spring Security
		implementation 'org.springframework.boot:spring-boot-starter-security:3.0.5'
		implementation 'org.springframework.boot:spring-boot-starter-web:3.0.5'

		// Spring DIを明示的に宣言
        implementation 'org.springframework:spring-context:5.3.12'

		// jakartaを追加
	    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
		annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

		// Spring Security
    	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.5'
    	// testImplementation 'org.springframework.security:spring-security-test:6.0.3'
    }
}
